"""WARG CV Bootcamp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DhVwpmJ0pbQFGejytToLmlsUzVv6vw7q
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf


def main():
  # CONSTANTS
  BATCH_SIZE = 32
  EPOCHS = 17

  xTrain, yTrain, xTest, yTest = loading_data()
  model = training_model(xTrain)

  # Compile model
  model.compile(loss="sparse_categorical_crossentropy", optimizer = "adam", metrics = ["accuracy"])

  # Fit the model and store it in a variable
  historyTrain = model.fit(xTrain, yTrain, batch_size = BATCH_SIZE, epochs = EPOCHS)

  # Plots and Testing Model Accuracy
  plot_data(historyTrain, EPOCHS, model, xTest, yTest)

def loading_data():
  # Distributing data into variables
  dataSet = tf.keras.datasets.cifar10
  (xTrain, yTrain), (xTest, yTest) = dataSet.load_data()

  # Normalizing data so that the data is organized and on a common scale. 
  # This helps the model converge quicker.
  xTrain = tf.keras.utils.normalize(xTrain, axis = 1)
  xTest = tf.keras.utils.normalize(xTest, axis = 1)
  return xTrain, yTrain, xTest, yTest

def training_model(xTrain):
  # Input layer, Convolutional Layer with 128 Filters and Pooling Layer
  model = tf.keras.models.Sequential()
  model.add(tf.keras.layers.Conv2D(64, (3,3), input_shape = xTrain.shape[1:]))
  model.add(tf.keras.layers.Activation("relu"))
  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))
  model.add(tf.keras.layers.Dropout(0.2))

  # Second layer, Convolutional Layer with 64 Filters and Pooling Layer
  model.add(tf.keras.layers.Conv2D(128, (3,3)))
  model.add(tf.keras.layers.Activation("relu"))
  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))
  model.add(tf.keras.layers.Dropout(0.2))

  # Third layer, Dense Layer with 128 Filters
  model.add(tf.keras.layers.Flatten())
  model.add(tf.keras.layers.Dense(128))
  model.add(tf.keras.layers.Activation("relu"))

  # Output layer, Dense Layer with softmax activation
  model.add(tf.keras.layers.Dense(10))
  model.add(tf.keras.layers.Activation("softmax"))
  
  return model

def plot_data(historyTrain, EPOCHS, model, xTest, yTest):
  # Plots and Testing Model Accuracy

  lossTrain = historyTrain.history['loss']
  accTrain = historyTrain.history['accuracy']
  epochs = range(1, EPOCHS+1)


  plt.plot(epochs, lossTrain, 'g', label='Training Loss Over Time')
  plt.title('Training Loss')
  plt.xlabel('Epochs')
  plt.ylabel('Loss')
  plt.legend()
  plt.show()

  plt.plot(epochs, accTrain, 'b', label='Training Accuracy Over Time')
  plt.title('Training accuracy')
  plt.xlabel('Epochs')
  plt.ylabel('Accuracy')
  plt.legend()
  plt.show()

  valLoss, valAcc = model.evaluate(xTest, yTest)
  print("Validation loss: ", valLoss, "\nValidation Accuracy: ", valAcc*100, "%")

main()
